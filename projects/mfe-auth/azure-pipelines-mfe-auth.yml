# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  branches:
    include:
      - main
      - feature/*
      - fix/*
  paths:
    include:
      - "mfe-host/*"

variables:
  nodeVersion: "22.x"
  npmRegistryURL: "https://registry.npmjs.org/"
  appName: "mfe-host"
  appPath: "projects/mfe-host"
  appArtifactName: "mfe-host"
  appBuildCommandDev: "npm run build:mfe-host -- --configuration=development"
  appBuildCommandProd: "npm run build:mfe-host -- --configuration=production"
  tag: $(Build.BuildId)
  DistExists: false

stages:
  - stage: Build
    jobs:
      - job: install_dependencies
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: $(nodeVersion)
            displayName: "Install Node.js"

          - task: Cache@2
            inputs:
              key: "**/package-lock.json, !**/node_modules/**/package-lock.json, !**/.*/**/package-lock.json"
              path: "$(Build.SourcesDirectory)/node_modules"
              cacheHitVar: CacheRestored
            displayName: "Cache Npm Dependencies"

          - script: |
              npm install -g @angular/cli
              npm install
            condition: ne(variables['CacheRestored'], 'true')
            displayName: "Install dependencies"

          - script: |
              ${{ variables.appBuildCommandProd }}
              ls
            displayName: "Build ${{ variables.appName }} Prod"
            env:
              MS_API_URL: $(MS_API_URL)

          - powershell: |
              $distExists = Test-Path -Path "$(Build.SourcesDirectory)/dist/${{ variables.appPath }}"
              Write-Host "##vso[task.setvariable variable=DistExists]$distExists"

      - job: deploy_build
        dependsOn: install_dependencies
        pool:
          vmImage: ubuntu-latest
        steps:
          # copy artifacts
          - task: CopyFiles@2
            displayName: "Copy Files to: $(Build.ArtifactStagingDirectory)"
            inputs:
              SourceFolder: "$(Build.SourcesDirectory)/dist"
              Contents: "**"
              TargetFolder: "$(build.artifactstagingdirectory)"
            condition: eq(variables['DistExists'], True) # If dist folder present then copy else skip

          # archive artifacts
          - task: Cache@2
            displayName: Archive Build Artifacts
            condition: eq(variables['DistExists'], True) # If dist folder present then copy else skip
            continueOnError: true
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/dist/${variables.appPath}"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: $(Build.ArtifactStagingDirectory)/build/${variables.appArtifactName}-$(Build.BuildId)-prod.zip

          # publish artifacts
          - task: Cache@2
            displayName: Publish Build Artifacts
            condition: eq(variables['DistExists'], True) # If dist folder present then copy else skip
            continueOnError: true
            inputs:
              pathtoPublish: $(Build.ArtifactStagingDirectory)/build/${variables.appArtifactName}-$(Build.BuildId)-prod.zip
              artifactName: "drop"
