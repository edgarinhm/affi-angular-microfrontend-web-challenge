# parameters:
#   - name: set_env
#     type: stepList
#     default: []
#   - name: environmentVariables
#     type: object
#     default: []

stages:
  - stage: ${{ parameters.stageName }}
    displayName: Build and publish artifact ${{ parameters.stageDisplayName }}
    #group:
    #pool:
    jobs:
      - job: build
        displayName: Build  ${{ parameters.stageDisplayName }}
        steps:
          # Install node
          - task: NodeTool@0
            displayName: "Install Node.js $(nodeVersion)"
            inputs:
              versionSpec: $(nodeVersion)

          # Save the cache
          - task: Cache@2
            inputs:
              key: $(NPM_CACHE_KEYS)
              restoreKeys: |
                npm | "$(Agent.OS)"
              path: $(NPM_CACHE_FOLDER)
              cacheHitVar: NPM_CACHE_RESTORED
            displayName: "Cache Npm Dependencies"

          # Install dependencies
          - script: |
              npm install -g @angular/cli@$(angularCliVersion)
              npm ci
            displayName: "Angular CLI $(angularCliVersion) and Install dependencies"

          # - ${{ each step in parameters.set_env }}:
          #     - ${{ step }}

          - ${{ each customEnv in parameters.environmentVariables }}:
              - script: echo "Setting variable ${{ customEnv.variableName }}"
                # - script: |
                #     echo "Setting variable ${{ customEnv.variableName }}"
                #     echo "##vso[task.setvariable variable=${{ customEnv.variableName}};]${{ customEnv.variableValue }}"
            displayName: "Set Environment Variable"

          - script: $(appBuildCommandProd)
            displayName: "Build $(appName)"

          # Archive build artifacts
          - task: ArchiveFiles@2
            displayName: "Archive Artifacts $(appArtifactName)"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/dist/$(appArtifactPath)"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/build/$(appArtifactPath)-$(Build.BuildId).zip"
              replaceExistingArchive: true

          # Publish build artifacts
          - task: PublishBuildArtifacts@1
            displayName: "Publish Artifacts $(appArtifactName)"
            inputs:
              pathtoPublish: "$(Build.ArtifactStagingDirectory)/build/$(appArtifactPath)-$(Build.BuildId).zip"
              artifactName: "drop-$(appArtifactName)"
              publishLocation: "Container"
